// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_plan.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A Chromium build image, such as "kevin".
type Image struct {
	// The build image's name.
	ImageName            string   `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dfe14786b7f13cd, []int{0}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

// The files that should be tested in a test plan.
type BuildPayload struct {
	// We expect to use either version or images, but not both.
	// We'll drop the unnecessary one once we've sorted out details
	// with the Skylab team.
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Image                []*Image `protobuf:"bytes,2,rep,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildPayload) Reset()         { *m = BuildPayload{} }
func (m *BuildPayload) String() string { return proto.CompactTextString(m) }
func (*BuildPayload) ProtoMessage()    {}
func (*BuildPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dfe14786b7f13cd, []int{1}
}

func (m *BuildPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildPayload.Unmarshal(m, b)
}
func (m *BuildPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildPayload.Marshal(b, m, deterministic)
}
func (m *BuildPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildPayload.Merge(m, src)
}
func (m *BuildPayload) XXX_Size() int {
	return xxx_messageInfo_BuildPayload.Size(m)
}
func (m *BuildPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildPayload.DiscardUnknown(m)
}

var xxx_messageInfo_BuildPayload proto.InternalMessageInfo

func (m *BuildPayload) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BuildPayload) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

// Hardware or VM requirements for running a test plan.
type SchedulingRequirements struct {
	// A Chromium lead build target, such as "reef", for which testing is desired.
	ReferenceDesign      string   `protobuf:"bytes,1,opt,name=reference_design,json=referenceDesign,proto3" json:"reference_design,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulingRequirements) Reset()         { *m = SchedulingRequirements{} }
func (m *SchedulingRequirements) String() string { return proto.CompactTextString(m) }
func (*SchedulingRequirements) ProtoMessage()    {}
func (*SchedulingRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dfe14786b7f13cd, []int{2}
}

func (m *SchedulingRequirements) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingRequirements.Unmarshal(m, b)
}
func (m *SchedulingRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingRequirements.Marshal(b, m, deterministic)
}
func (m *SchedulingRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingRequirements.Merge(m, src)
}
func (m *SchedulingRequirements) XXX_Size() int {
	return xxx_messageInfo_SchedulingRequirements.Size(m)
}
func (m *SchedulingRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingRequirements proto.InternalMessageInfo

func (m *SchedulingRequirements) GetReferenceDesign() string {
	if m != nil {
		return m.ReferenceDesign
	}
	return ""
}

// Metadata for executing one test suite in one test environment.
type TestPlan struct {
	// The testing environment, such as "hw", "vm", "gce", or "tast".
	TestEnv string `protobuf:"bytes,1,opt,name=test_env,json=testEnv,proto3" json:"test_env,omitempty"`
	// The test suite to run, such as "bvt-inline" or "bvt-cq".
	TestSuite string `protobuf:"bytes,2,opt,name=test_suite,json=testSuite,proto3" json:"test_suite,omitempty"`
	// The scheduling requirements for this test plan.
	SchedulingRequirements *SchedulingRequirements `protobuf:"bytes,3,opt,name=scheduling_requirements,json=schedulingRequirements,proto3" json:"scheduling_requirements,omitempty"`
	// The build files provided to run this test plan.
	BuildPayload         *BuildPayload `protobuf:"bytes,4,opt,name=build_payload,json=buildPayload,proto3" json:"build_payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TestPlan) Reset()         { *m = TestPlan{} }
func (m *TestPlan) String() string { return proto.CompactTextString(m) }
func (*TestPlan) ProtoMessage()    {}
func (*TestPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dfe14786b7f13cd, []int{3}
}

func (m *TestPlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestPlan.Unmarshal(m, b)
}
func (m *TestPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestPlan.Marshal(b, m, deterministic)
}
func (m *TestPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPlan.Merge(m, src)
}
func (m *TestPlan) XXX_Size() int {
	return xxx_messageInfo_TestPlan.Size(m)
}
func (m *TestPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPlan.DiscardUnknown(m)
}

var xxx_messageInfo_TestPlan proto.InternalMessageInfo

func (m *TestPlan) GetTestEnv() string {
	if m != nil {
		return m.TestEnv
	}
	return ""
}

func (m *TestPlan) GetTestSuite() string {
	if m != nil {
		return m.TestSuite
	}
	return ""
}

func (m *TestPlan) GetSchedulingRequirements() *SchedulingRequirements {
	if m != nil {
		return m.SchedulingRequirements
	}
	return nil
}

func (m *TestPlan) GetBuildPayload() *BuildPayload {
	if m != nil {
		return m.BuildPayload
	}
	return nil
}

// A full set of test plans for a given CQ run.
type CombinedTestPlan struct {
	// The test plans needed to satisfy this CQ run.
	TestPlan             []*TestPlan `protobuf:"bytes,1,rep,name=test_plan,json=testPlan,proto3" json:"test_plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CombinedTestPlan) Reset()         { *m = CombinedTestPlan{} }
func (m *CombinedTestPlan) String() string { return proto.CompactTextString(m) }
func (*CombinedTestPlan) ProtoMessage()    {}
func (*CombinedTestPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dfe14786b7f13cd, []int{4}
}

func (m *CombinedTestPlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CombinedTestPlan.Unmarshal(m, b)
}
func (m *CombinedTestPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CombinedTestPlan.Marshal(b, m, deterministic)
}
func (m *CombinedTestPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CombinedTestPlan.Merge(m, src)
}
func (m *CombinedTestPlan) XXX_Size() int {
	return xxx_messageInfo_CombinedTestPlan.Size(m)
}
func (m *CombinedTestPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_CombinedTestPlan.DiscardUnknown(m)
}

var xxx_messageInfo_CombinedTestPlan proto.InternalMessageInfo

func (m *CombinedTestPlan) GetTestPlan() []*TestPlan {
	if m != nil {
		return m.TestPlan
	}
	return nil
}

func init() {
	proto.RegisterType((*Image)(nil), "testplans.Image")
	proto.RegisterType((*BuildPayload)(nil), "testplans.BuildPayload")
	proto.RegisterType((*SchedulingRequirements)(nil), "testplans.SchedulingRequirements")
	proto.RegisterType((*TestPlan)(nil), "testplans.TestPlan")
	proto.RegisterType((*CombinedTestPlan)(nil), "testplans.CombinedTestPlan")
}

func init() { proto.RegisterFile("test_plan.proto", fileDescriptor_2dfe14786b7f13cd) }

var fileDescriptor_2dfe14786b7f13cd = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x31, 0x6f, 0xf2, 0x30,
	0x10, 0x55, 0x3e, 0x3e, 0x0a, 0x39, 0xa8, 0x40, 0xae, 0x04, 0xe9, 0x50, 0x89, 0x66, 0x40, 0x74,
	0x41, 0x15, 0x5d, 0x3b, 0x01, 0x1d, 0xba, 0x54, 0xc8, 0x74, 0x62, 0x89, 0x1c, 0x72, 0xa5, 0x96,
	0x12, 0x87, 0xda, 0x0e, 0x52, 0xff, 0x6c, 0x7f, 0x4b, 0xe5, 0xa3, 0x89, 0x3c, 0x30, 0xc5, 0xef,
	0xdd, 0xe5, 0xee, 0xbd, 0x77, 0x30, 0xb0, 0x68, 0x6c, 0x72, 0xcc, 0x85, 0x9a, 0x1f, 0x75, 0x69,
	0x4b, 0x16, 0x3a, 0xc2, 0x61, 0x13, 0x4f, 0xa1, 0xfd, 0x5a, 0x88, 0x03, 0xb2, 0x3b, 0x00, 0xe9,
	0x1e, 0x89, 0x12, 0x05, 0x46, 0xc1, 0x24, 0x98, 0x85, 0x3c, 0x24, 0xe6, 0x4d, 0x14, 0x18, 0x6f,
	0xa0, 0xbf, 0xac, 0x64, 0x9e, 0x6d, 0xc4, 0x77, 0x5e, 0x8a, 0x8c, 0x45, 0xd0, 0x39, 0xa1, 0x36,
	0xb2, 0x54, 0x7f, 0xbd, 0x35, 0x64, 0x53, 0x68, 0xd3, 0x6f, 0xd1, 0xbf, 0x49, 0x6b, 0xd6, 0x5b,
	0x0c, 0xe7, 0xcd, 0xb2, 0x39, 0x6d, 0xe2, 0xe7, 0x72, 0xbc, 0x82, 0xd1, 0x76, 0xff, 0x89, 0x59,
	0x95, 0x4b, 0x75, 0xe0, 0xf8, 0x55, 0x49, 0x8d, 0x05, 0x2a, 0x6b, 0xd8, 0x03, 0x0c, 0x35, 0x7e,
	0xa0, 0x46, 0xb5, 0xc7, 0x24, 0x43, 0x23, 0x0f, 0xf5, 0x92, 0x41, 0xc3, 0xaf, 0x89, 0x8e, 0x7f,
	0x02, 0xe8, 0xbe, 0xa3, 0xb1, 0x9b, 0x5c, 0x28, 0x76, 0x0b, 0x5d, 0x72, 0x8a, 0xea, 0x54, 0x8b,
	0x72, 0xf8, 0x45, 0x9d, 0x9c, 0x3b, 0x2a, 0x99, 0x4a, 0x5a, 0xa7, 0x8c, 0xdc, 0x39, 0x66, 0xeb,
	0x08, 0xb6, 0x83, 0xb1, 0x69, 0xb4, 0x24, 0xda, 0x13, 0x13, 0xb5, 0x26, 0xc1, 0xac, 0xb7, 0xb8,
	0xf7, 0x5c, 0x5c, 0x56, 0xcd, 0x47, 0xe6, 0xb2, 0x9b, 0x67, 0xb8, 0x4e, 0x5d, 0x72, 0xc9, 0xf1,
	0x1c, 0x5d, 0xf4, 0x9f, 0x26, 0x8e, 0xbd, 0x89, 0x7e, 0xb2, 0xbc, 0x9f, 0x7a, 0x28, 0x5e, 0xc3,
	0x70, 0x55, 0x16, 0xa9, 0x54, 0x98, 0x35, 0x3e, 0x1f, 0x21, 0x6c, 0x2e, 0x1a, 0x05, 0x94, 0xf2,
	0x8d, 0x37, 0xad, 0xee, 0xe3, 0x94, 0x86, 0x7b, 0x2d, 0x3b, 0xbb, 0x36, 0x5d, 0x3e, 0xbd, 0xa2,
	0xcf, 0xd3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x64, 0x72, 0xbe, 0x13, 0x02, 0x00, 0x00,
}
